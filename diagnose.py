# diagnose.py

import json
import time
import logging
from core.hardware_interface import HardwareInterface
from typing import Union

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [DIAG] %(levelname)s: %(message)s',
    handlers=[
        logging.FileHandler("diagnostics.log", encoding="utf-8"),
        #logging.StreamHandler()
    ]
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
hw = None
hw_config = None


def load_hardware_config():
    try:
        with open("config/hardware_config.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å hardware_config.json: {e}")
        return None


def test_connection(module_id: str, module_type: str = ""):
    command = f"${module_id}M"
    response = hw._send_command(command)
    if response and response.startswith(f"!{module_id}"):
        logging.info(f" {module_type}-{module_id}: —Å–≤—è–∑—å OK")
        print(f"‚úÖ {module_type}-{module_id}: —Å–≤—è–∑—å OK")
        return True
    else:
        logging.error(f" {module_type}-{module_id}: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        print(f"‚ùå {module_type}-{module_id}: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        return False


def read_ai(module_id: str):
    """–ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ AI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞ +4.231, +20.500, +0020.9"""
    command = f"#{module_id}"
    response = hw._send_command(command)
    logging.info(f"DCON: {command} -> {response}")
    #print(f"DCON: {command} -> {response}")
    if not response:
        logging.error(f" AI-{module_id}: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        return None

    # –£–¥–∞–ª—è–µ–º '>' –∏ –ø—Ä–æ–±–µ–ª—ã
    clean = response.strip().lstrip('>').strip()

    if not clean.startswith('+'):
        logging.error(f" AI-{module_id}: –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '+': {clean}")
        return None

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ '+' –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
    raw_values = [val.strip() for val in clean.split('+') if val.strip()]

    if not raw_values:
        logging.error(f" AI-{module_id}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏—è")
        return None

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ —Å—ã—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏
    logging.info(f" AI-{module_id}: —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {raw_values}")
    return raw_values  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫


def read_di_do(module_id: str):
    """–ß—Ç–µ–Ω–∏–µ DI/DO: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HEX –∏ BIN, –ª–æ–≥–∏—Ä—É–µ—Ç –∫–∞–∫ –µ—Å—Ç—å"""
    command = f"@{module_id}"
    response = hw._send_command(command)
    logging.info(f"DCON: {command} -> {response}")
    #print(f"DCON: {command} -> {response}")

    if not response or not response.startswith('>'):
        logging.error(f" DI/DO-{module_id}: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞")
        return None

    hex_str = response[1:].strip()
    try:
        value = int(hex_str, 16)
        binary = f"{value:016b}"
        logging.info(f" DI/DO-{module_id}: HEX={hex_str}, BIN={binary}")
        return {"hex": hex_str, "bin": binary, "int": value}
    except ValueError:
        logging.error(f" DI/DO-{module_id}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å HEX: {hex_str}")
        return None


def write_do(module_id: Union[str, int], byte_low: int, byte_high: int):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è hw.write_do ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π hw"""
    global hw
    if hw is None:
        logging.error(" HardwareInterface –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return

    try:
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑ hardware_interface
        hw.write_do(module_id, byte_low, byte_high)
    except Exception as e:
        logging.error(f" –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ hw.write_do: {e}")


def toggle_do_channel(module_id: str, channel: int, on: bool):
    if channel < 0 or channel > 15:
        logging.error("–ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0‚Äì15")
        return

    current = hw.read_digital(module_id) or 0
    mask = 1 << channel
    if on:
        new_state = current | mask
        action = "–≤–∫–ª—é—á—ë–Ω"
    else:
        new_state = current & ~mask
        action = "–≤—ã–∫–ª—é—á–µ–Ω"

    hw.write_do(module_id, new_state & 0xFF, (new_state >> 8) & 0xFF)
    time.sleep(0.1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    readback = hw.read_digital(module_id)
    if readback is not None and bool(readback & mask) == on:
        logging.info(f" DO-{module_id}.{channel} {action}")
    else:
        logging.error(f" DO-{module_id}.{channel}: –æ—à–∏–±–∫–∞ {action}")


def test_all_presses():
    logging.info(" –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ—Å—Å–æ–≤...")
    for press in hw_config["presses"]:
        pid = press["id"]
        print("+++++++–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Å—Åa "+ str(pid)+" ++++++++++++++")
        ai = press["modules"]["ai"]
        do = press["modules"]["do"]
        test_connection(ai, "AI")
        read_ai(ai)
        test_connection(do, "DO")
        read_di_do(do)
        print("==================================")
    test_common_modules()


def test_common_modules():
    print("+++++++test_common_modules++++++++++")
    ai = hw_config["common"]["ai_pressure_module"]
    di = hw_config["common"]["di_module"]
    di2 = hw_config["common"]["di_module_2"]
    do1 = hw_config["common"]["do_module_1"]
    do2 = hw_config["common"]["do_module_2"]
    test_connection(ai, "AI - Pressure ")
    read_ai(ai)
    test_connection(di, "DI1 - Buttons ")
    read_di_do(di)
    test_connection(di2, "DI2 - Buttons ")
    read_di_do(di2)
    test_connection(do1, "DO1 - Lamps ")
    read_di_do(do1)
    test_connection(do2, "DO2 - Lamps ")
    read_di_do(do2)
    print("==================================")


def manual_do_control():
    print("\nüîß –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DO (–≤–≤–µ–¥–∏—Ç–µ 00 –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    global hw
    if hw is None:
        logging.error("‚ùå hw –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return

    while True:
        try:
            mod_input = input("–ú–æ–¥—É–ª—å (ID): ").strip()
            if mod_input == "00":
                break
            if not mod_input.isdigit():
                logging.error("ID –º–æ–¥—É–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                continue

            low_hex = input("LOW (HEX, 00‚ÄìFF): ").strip()
            high_hex = input("HIGH (HEX, 00‚ÄìFF): ").strip()

            byte_low = int(low_hex, 16)
            byte_high = int(high_hex, 16)
            module_id = int(mod_input)

            logging.info(f" –ó–∞–ø–∏—Å—å DO: –º–æ–¥—É–ª—å={module_id}, LOW=0x{byte_low:02X}, HIGH=0x{byte_high:02X}")
            write_do(module_id, byte_low, byte_high)  # –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±—ë—Ä—Ç–∫—É

        except ValueError:
            logging.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ HEX-–∑–Ω–∞—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 00‚ÄìFF.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")

def interactive_do_channel():
    print("\nüîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º DO")
    try:
        mod = input("–ú–æ–¥—É–ª—å DO: ").strip()
        ch = int(input("–ö–∞–Ω–∞–ª (0‚Äì15): "))
        action = input("–î–µ–π—Å—Ç–≤–∏–µ (on/off): ").strip().lower()
        if action == "on":
            toggle_do_channel(mod, ch, True)
        elif action == "off":
            toggle_do_channel(mod, ch, False)
        else:
            logging.error("–í–≤–µ–¥–∏—Ç–µ on –∏–ª–∏ off")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")


def read_all_ai():
        """–ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö AI-–º–æ–¥—É–ª–µ–π –∏–∑ dcon_devices"""
        logging.info(" –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö AI-–º–æ–¥—É–ª–µ–π...")

        try:
            with open("config/config.json", "r", encoding="utf-8") as f:
                config = json.load(f)
            devices = config.get("dcon_devices", [])
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.json: {e}")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ AI-–º–æ–¥—É–ª–∏
        ai_modules = [dev for dev in devices if dev["type"] in ("7017", "7018")]
        # print(ai_modules)

        if not ai_modules:
            logging.warning(" –í dcon_devices –Ω–µ—Ç AI-–º–æ–¥—É–ª–µ–π (7017/7018)")
            return

        for dev in ai_modules:
            try:
                module_id = f"{int(dev['id']):02d}"
                read_ai(module_id)
            except Exception as e:
                logging.error(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ AI-{module_id}: {e}")


def read_all_di_do():
    logging.info(" –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö DI/DO...")
    print("üìå –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö DI/DO...")

    try:
        with open("config/config.json", "r", encoding="utf-8") as f:
            config = json.load(f)
        devices = config.get("dcon_devices", [])
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.json: {e}")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ AI-–º–æ–¥—É–ª–∏
    di_modules = [dev for dev in devices if dev["type"] in ("7045", "7051")]
    # print(ai_modules)

    if not di_modules:
        logging.warning(" –í dcon_devices –Ω–µ—Ç DI-–º–æ–¥—É–ª–µ–π (7051/7045)")
        return

    for dev in di_modules:
        try:
            module_id = f"{int(dev['id']):02d}"
            read_di_do(module_id)
        except Exception as e:
            logging.error(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ DI-{module_id}: {e}")

def check_all_connections():
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å–æ –≤—Å–µ–º–∏ –º–æ–¥—É–ª—è–º–∏...")
    print("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å–æ –≤—Å–µ–º–∏ –º–æ–¥—É–ª—è–º–∏...")
    for press in hw_config["presses"]:
        ai = press["modules"]["ai"]
        do = press["modules"]["do"]
        test_connection(ai, "AI")
        test_connection(do, "DO")
    test_common_modules()


def show_status_summary():
    print("\n" + "="*50)
    print("–ö–†–ê–¢–ö–ò–ô –û–¢–ß–Å–¢ –ü–û –û–ë–û–†–£–î–û–í–ê–ù–ò–Æ")
    print("="*50)
    for i, press in enumerate(hw_config["presses"], 1):
        ai_mod = press["modules"]["ai"]
        do_mod = press["modules"]["do"]
        ai_temp = read_ai(ai_mod)
        temp_str = []
        for value in ai_temp:
            num = round(float(value), 1)
            formatted = f"{num:.1f}" + '¬∞C'
            temp_str.append(formatted)

        do_val = hw.read_digital(do_mod)
        do_bin = f"{do_val:016b}" if do_val else "????"
        print(f"–ü—Ä–µ—Å—Å {i}: T={temp_str} | DO={do_bin}")

    ai = hw_config["common"]["ai_pressure_module"]
    di = hw_config["common"]["di_module"]
    di2 = hw_config["common"]["di_module_2"]
    do1 = hw_config["common"]["do_module_1"]
    do2 = hw_config["common"]["do_module_2"]

    ai_temp = read_ai(ai)
    temp_str = []
    for value in ai_temp:
        num = round(float(value), 1)
        formatted = f"{num:.1f}" + ' bar'
        temp_str.append(formatted)

    di_val = hw.read_digital(di)
    di_val2 = hw.read_digital(di2)
    di_bin = f"{di} = {di_val:016b} | {di2} = {di_val2:016b}" if di_val else "????"
    do_val = hw.read_digital(do1)
    do_val2 = hw.read_digital(do2)
    do_bin = f"{do1} = {do_val:016b} | {do2} = {do_val2:016b}" if do_val else "????"
    print(f"–û–±—â–∏–µ DI: {di_bin}")
    print(f"–û–±—â–∏–µ DO: {do_bin}")
    print(f"–î–∞–≤–ª–µ–Ω–∏–µ : {temp_str}")
    print("="*50)

def show_network():
    """–ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏–∑ dcon_devices"""
    config_path = "config/config.json"

    try:
        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)
        devices = config.get("dcon_devices", [])
        if not devices:
            logging.warning(f"–í {config_path} –Ω–µ—Ç dcon_devices.")
            return
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {config_path}: {e}")
        return

    print("\n" + "="*60)
    print("üîç –°–´–†–´–ï –î–ê–ù–ù–´–ï –° –ú–û–î–£–õ–ï–ô (–∏–∑ dcon_devices)")
    print("="*60)

    # AI-–º–æ–¥—É–ª–∏
    ai_modules = [d for d in devices if d["type"] in ("7017", "7018")]
    if ai_modules:
        print("üì° –ê–ù–ê–õ–û–ì–û–í–´–ï –í–•–û–î–´ (AI):")
        for dev in ai_modules:
            module_id = f"{int(dev['id']):02d}"
            data = read_ai(module_id)
            if data:
                print(f"  AI-{module_id}: {' + '.join(data)}")

    # DI/DO-–º–æ–¥—É–ª–∏
    dio_modules = [d for d in devices if d["type"] in ("7045", "7051", "7052", "7060")]
    if dio_modules:
        print("\nüî¢ –î–ò–°–ö–†–ï–¢–ù–´–ï –í–•–û–î–´/–í–´–•–û–î–´ (DI/DO):")
        for dev in dio_modules:
            module_id = f"{int(dev['id']):02d}"
            data = read_di_do(module_id)
            if data:
                print(f"  DO/DI-{module_id}: HEX={data['hex']}, BIN={data['bin']}")

    print("="*60)


def scan_network():
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ DCON: –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –æ—Ç–≤–µ—á–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π"""
    logging.info(" –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ DCON (–∞–¥—Ä–µ—Å–∞ 01‚Äì40)...")
    print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ DCON (–∞–¥—Ä–µ—Å–∞ 01‚Äì40)...")
    discovered = []

    for addr in range(1, 40):
        module_id = f"{addr:02d}"
        command = f"${module_id}M"
        response = hw._send_command(command)
        time.sleep(0.1)  # –∏–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç–∞

        if response and response.startswith(f"!{module_id}"):
            model_code = response[3:]  # –ø–æ—Å–ª–µ !xx
            model = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if model_code == "7017":
                model = "I-7017"  # 8-–∫–∞–Ω–∞–ª—å–Ω—ã–π AI
            elif model_code == "7018":
                model = "I-7018"  # 8-–∫–∞–Ω–∞–ª—å–Ω—ã–π AI (–¥—Ä—É–≥–æ–π —Ç–∏–ø)
            elif model_code == "7051":
                model = "I-7051"  # 8-–∫–∞–Ω–∞–ª—å–Ω—ã–π DO
            elif model_code == "7045":
                model = "I-7045"  # DO/DO
            # –î–æ–±–∞–≤—å —Å–≤–æ–∏ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

            numeric_id = int(module_id)  # "33" ‚Üí 33

            info = {
                "id": numeric_id,
                "model": model,
                "type": model_code
            }
            discovered.append(info)
            logging.info(f" –ù–∞–π–¥–µ–Ω {model} –ø–æ –∞–¥—Ä–µ—Å—É {module_id}, –æ—Ç–≤–µ—Ç {response}")
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω {model} –ø–æ –∞–¥—Ä–µ—Å—É {module_id}")

    if not discovered:
        logging.warning(" –ù–∏ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è DCON –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    print("\n" + "="*60)
    print("üåê –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø DCON-–°–ï–¢–ò")
    print("="*60)
    for dev in discovered:
        print(f"üìç {dev['id']} | {dev['model']} ")
    print("="*60)

    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å dcon_devices –≤ config/config.json
    save = input("\n–û–±–Ω–æ–≤–∏—Ç—å dcon_devices –≤ config/config.json? (y/n): ").strip().lower()
    if save != 'y':
        return

    config_path = "config/config.json"

    try:
        # –ß–∏—Ç–∞–µ–º –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô config.json
        with open(config_path, "r", encoding="utf-8") as f:
            config_data = json.load(f)
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥: {config_path}")
    except FileNotFoundError:
        logging.warning(f"{config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        config_data = {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {config_path}: {e}. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        config_data = {}

    # –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –≤–µ—Ç–∫—É dcon_devices
    config_data["dcon_devices"] = discovered

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    try:
        with open(config_path, "w", encoding="utf-8") as f:
            json.dump(config_data, f, indent=2, ensure_ascii=False)
        logging.info(f"‚úÖ {config_path} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: dcon_devices –∑–∞–ø–∏—Å–∞–Ω.")
        print(f"–§–∞–π–ª {config_path} –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {config_path}: {e}")


def main_menu():
    print("\nüîß –°–ò–°–¢–ï–ú–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò DCON")
    print("1 ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å —Å–æ –≤—Å–µ–º–∏ –º–æ–¥—É–ª—è–º–∏")
    print("2 ‚Äî –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ AI (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)")
    print("3 ‚Äî –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ DI/DO")
    print("4 ‚Äî –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ—Å—Å–æ–≤")
    print("5 ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â–∏–µ –º–æ–¥—É–ª–∏ (DI)")
    print("6 ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DO: –Ω–∞–ø—Ä—è–º—É—é (LOW/HIGH)")
    print("7 ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DO: –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª (on/off)")
    print("8 ‚Äî –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ —Å–∏—Å—Ç–µ–º–µ")
    print("9 ‚Äî –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ DCON (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π)")
    print("10 ‚Äî –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π DCON ")
    print("0 ‚Äî –í—ã—Ö–æ–¥")

    while True:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            check_all_connections()
        elif choice == "2":
            read_all_ai()
        elif choice == "3":
            read_all_di_do()
        elif choice == "4":
            test_all_presses()
        elif choice == "5":
            test_common_modules()
        elif choice == "6":
            manual_do_control()
        elif choice == "7":
            interactive_do_channel()
        elif choice == "8":
            show_status_summary()
        elif choice == "9":
            scan_network()
        elif choice == "10":
            show_network()
        elif choice == "0":
            logging.info("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1‚Äì9.")


def main():
    global hw, hw_config

    logging.info("–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ DCON...")
    hw_config = load_hardware_config()

    if not hw_config:
        exit(1)

    try:
        hw = HardwareInterface("config/system.json", direct_mode=True)
    except Exception as e:
        logging.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        exit(1)

    try:
        main_menu()
    except KeyboardInterrupt:
        logging.info("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logging.critical(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        hw.close()
        logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")


if __name__ == "__main__":
    main()