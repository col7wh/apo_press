# main.py
import sys
import json
import time
import logging
import threading
import os
import atexit
from typing import Dict, Any
from core.hardware_interface import HardwareInterface
from core.press_controller import PressController
from core.hardware_daemon import HardwareDaemon
from core.web_interface import WebInterface
from core.control_manager import ControlManager
from core.global_state import state

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [MAIN] %(levelname)s: %(message)s',
    handlers=[
        logging.FileHandler("app.log", encoding="utf-8"),
        # logging.StreamHandler()
    ]
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
hardware_interface: HardwareInterface = None
press_controllers: Dict[int, PressController] = {}
running = True
daemon: HardwareDaemon = None  # –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main()
control_managers = {}


def load_system_config() -> Dict[str, Any]:
    try:
        with open("config/system.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        logging.critical("M –§–∞–π–ª config/system.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        exit(1)
    except Exception as e:
        logging.critical(f"M –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config/system.json: {e}")
        exit(1)


def initialize_hardware() -> HardwareInterface:
    global hardware_interface
    try:
        hardware_interface = HardwareInterface("config/system.json")
        logging.info("M –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return hardware_interface
    except Exception as e:
        logging.critical(f"M –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {e}")
        exit(1)


def start_press(press_id: int):
    if press_id < 1 or press_id > 3:
        logging.warning("M –ü—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1, 2 –∏–ª–∏ 3.")
        return

    # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    pc = PressController(press_id=press_id, config=hw_config)
    press_controllers[press_id] = pc
    pc.start()
    logging.info(f"M –ü—Ä–µ—Å—Å-{press_id} –∑–∞–ø—É—â–µ–Ω.")


def stop_press(press_id: int, emergency: bool = False):
    if press_id not in press_controllers:
        logging.info(f"M –ü—Ä–µ—Å—Å-{press_id} –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    pc = press_controllers[press_id]
    if emergency:
        pc.emergency_stop()
        logging.warning(f"M –ü—Ä–µ—Å—Å-{press_id}: –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞!")
    else:
        pc.stop()
        logging.info(f"M –ü—Ä–µ—Å—Å-{press_id}: –æ—Å—Ç–∞–Ω–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É.")


def show_status():
    print("\n" + "=" * 50)
    for pid in range(1, 4):
        # –ß–∏—Ç–∞–µ–º –∏–∑ state ‚Äî –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã
        running = state.get(f"press_{pid}_running", False)
        paused = state.get(f"press_{pid}_paused", False)
        completed = state.get(f"press_{pid}_completed", False)

        temp_step = state.get(f"press_{pid}_current_step_temperature", {})
        press_step = state.get(f"press_{pid}_current_step_pressure", {})

        index_temp = temp_step.get("index", -1)
        index_press = press_step.get("index", -1)
        current_step = max(index_temp, index_press) + 1 if max(index_temp, index_press) >= 0 else "-"

        if running:
            status = "–ü–ê–£–ó–ê" if paused else "–†–ê–ë–û–¢–ê–ï–¢"
            print(f"–ü—Ä–µ—Å—Å-{pid}: {status} | –®–∞–≥ {current_step}")
        else:
            if completed:
                print(f"–ü—Ä–µ—Å—Å-{pid}: –ó–ê–í–ï–†–®–Å–ù")
            else:
                print(f"–ü—Ä–µ—Å—Å-{pid}: –û–°–¢–ê–ù–û–í–õ–ï–ù")
    print("=" * 50)


def show_programs():
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
    for pid in range(1, 4):
        path = f"programs/press{pid}.json"
        if os.path.exists(path):
            try:
                with open(path, "r", encoding="utf-8") as f:
                    prog = json.load(f)
                # üî¢ –°—á–∏—Ç–∞–µ–º —à–∞–≥–∏
                temp_steps = len(prog.get("temp_program", []))
                press_steps = len(prog.get("pressure_program", []))
                total = temp_steps + press_steps
                print(f"  –ü—Ä–µ—Å—Å {pid}: {total} —à–∞–≥–æ–≤ (T:{temp_steps}, P:{press_steps})")
            except Exception as e:
                print(f"  –ü—Ä–µ—Å—Å {pid}: ‚ùå –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ({e})")
        else:
            print(f"  –ü—Ä–µ—Å—Å {pid}: ‚ùå —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")


def command_loop():
    time.sleep(0.19)
    global running
    while running:
        print("\n" + "=" * 50)
        print("üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ï–°–°–ê–ú–ò")
        print("=" * 50)
        print("1 ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ—Å—Å 1")
        print("2 ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ—Å—Å 2")
        print("3 ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ—Å—Å 3")
        print("4 ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Å—Å 1")
        print("5 ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Å—Å 2")
        print("6 ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Å—Å 3")
        print("7 ‚Äî –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö")
        print("8 ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        print("9 ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("0 ‚Äî –í—ã—Ö–æ–¥")
        print("-" * 50)

        try:
            cmd = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

            if cmd == "1":
                start_press(1)
            elif cmd == "2":
                start_press(2)
            elif cmd == "3":
                start_press(3)
            elif cmd == "4":
                stop_press(1)
            elif cmd == "5":
                stop_press(2)
            elif cmd == "6":
                stop_press(3)
            elif cmd == "7":
                logging.warning("M –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ—Å—Å–æ–≤!")
                # 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
                for pid in list(press_controllers.keys()):
                    pc = press_controllers[pid]
                    if pc.is_alive():
                        pc.emergency_stop()
                        pc.join(timeout=0.5)

                # 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ DO-–º–æ–¥—É–ª–∏ –Ω–∞–≥—Ä–µ–≤–∞
                do_modules = ["34", "35", "36"]  # –ü—Ä–µ—Å—Å 1, 2, 3
                for mod in do_modules:
                    state.write_do(mod, 0, 0)
                    state.set(f"do_state_{mod}", 0)
                    logging.info(f"M –ê–≤–∞—Ä–∏–π–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–æ: DO-{mod}")

                # 3. –°–±—Ä–æ—Å–∏—Ç—å —É—Å—Ç–∞–≤–∫–∏
                for pid in [1, 2, 3]:
                    state.set(f"press_{pid}_target_temp", None)
                    state.set(f"press_{pid}_target_pressure", 0.0)

                logging.warning("M –í—Å–µ –ø—Ä–µ—Å—Å—ã –∞–≤–∞—Ä–∏–π–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
            elif cmd == "8":
                show_programs()
            elif cmd == "9":
                show_status()
            elif cmd == "33":
                print("–í–°–Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:")
                print_structured_state()
            elif cmd == "34":
                print("–í–°–Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:")
                print(state.get_all())
            elif cmd == "d" or cmd == "10":
                print("\nüîß –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...")
                try:
                    import subprocess
                    subprocess.run([sys.executable, "diagnose.py"], check=True)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ diagnose.py: {e}")
                input("–ù–∞–∂–º–∏—Ç–µ Enter...")
            elif cmd == "0":
                running = False
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        except (EOFError, KeyboardInterrupt):
            running = False
            break


def cleanup():
    global running, daemon, hardware_interface, control_managers
    running = False
    logging.info("M –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PressController
    for pc in press_controllers.values():
        if pc.running:
            pc.stop()
            pc.join(timeout=1.0)

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ControlManager
    for cm in control_managers.values():
        cm.stop()
        cm.join(timeout=1.0)

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å—ë
    if hardware_interface:
        do_modules = ["31", "32", "34", "35", "36"]
        for mod in do_modules:
            logging.info(f"M –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ DO-{mod}")
            hardware_interface._send_command(f"#{mod}0000")
            time.sleep(0.05)
            hardware_interface._send_command(f"#{mod}0B00")

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω–∞
    if daemon is not None:
        daemon.stop()
        daemon.join()

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if hardware_interface is not None:
        hardware_interface.close()

    logging.info("M –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


def print_structured_state():
    print("\n" + "=" * 60)
    print("üìä –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 60)

    # --- –î–ò–°–ö–†–ï–¢–ù–´–ï –í–•–û–î–´ ---
    print("\nüîå –î–ò–°–ö–†–ï–¢–ù–´–ï –í–•–û–î–´")
    print(f"  DI 37 (–∫–Ω–æ–ø–∫–∏):     {bin(state.get('di_module_37', 0))[2:].zfill(16)}")
    print(f"  DI 38 (–∫–æ–Ω—Ü–µ–≤–∏–∫–∏):  {bin(state.get('di_module_38', 0))[2:].zfill(16)}")

    # --- –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê ---
    print("\nüå°Ô∏è  –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê")
    for pid in [1, 2, 3]:
        temps = state.get(f"press_{pid}_temps", [None] * 8)
        target = state.get(f"press_{pid}_target_temp", "N/A")
        status_temp = state.get(f"press_{pid}_step_status_temperature", "stopped")
        print(f"  –ü—Ä–µ—Å—Å-{pid}: {temps[:7]} | –£—Å—Ç–∞–≤–∫–∞: {target}¬∞C | –°—Ç–∞—Ç—É—Å: {status_temp}")

    # --- –î–ê–í–õ–ï–ù–ò–ï ---
    print("\n‚öôÔ∏è  –î–ê–í–õ–ï–ù–ò–ï")
    for pid in [1, 2, 3]:
        pressure = state.get(f"press_{pid}_pressure", "N/A")
        target = state.get(f"press_{pid}_target_pressure", "N/A")
        status_press = state.get(f"press_{pid}_step_status_pressure", "stopped")
        print(f"  –ü—Ä–µ—Å—Å-{pid}: {pressure} –ú–ü–∞ ‚Üí {target} –ú–ü–∞ | –°—Ç–∞—Ç—É—Å: {status_press}")

    # --- –í–´–•–û–î–´ (DO) ---
    print("\nüîå –í–´–•–û–î–´ (DO)")
    for mod in [31, 32, 33, 34]:
        val = state.get(f"do_state_{mod}", 0)
        print(f"  DO {mod}: {bin(val)[2:].zfill(16)} ({val})")

    # --- –¢–ï–ö–£–©–ò–ï –®–ê–ì–ò ---
    print("\nüîÑ –¢–ï–ö–£–©–ò–ï –®–ê–ì–ò")
    for pid in [1, 2, 3]:
        temp_step = state.get(f"press_{pid}_current_step_temperature", {})
        press_step = state.get(f"press_{pid}_current_step_pressure", {})
        if temp_step or press_step:
            print(f"  –ü—Ä–µ—Å—Å-{pid}:")
            if temp_step:
                print(
                    f"    –¢–µ–º–ø:  {temp_step.get('index', '-')} | {temp_step.get('type', '-')} | –¶–µ–ª—å: {temp_step.get('target_temp', 'N/A')}¬∞C")
            if press_step:
                print(
                    f"    –î–∞–≤–ª:  {press_step.get('index', '-')} | {press_step.get('type', '-')} | –¶–µ–ª—å: {press_step.get('target_pressure', 'N/A')} –ú–ü–∞")

    print("=" * 60)


atexit.register(cleanup)


def main():
    global hardware_interface, daemon, hw_config, control_managers  # ‚úÖ –î–æ–±–∞–≤—å hw_config

    config = load_system_config()
    logging.info(f"M –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ: {config['mode']}")

    hardware_interface = initialize_hardware()

    config_path = os.path.join("config", "hardware_config.json")
    with open(config_path, "r", encoding="utf-8") as f:
        hw_config = json.load(f)

    daemon = HardwareDaemon(hardware_interface)
    daemon.start()
    logging.info("M HardwareDaemon –∑–∞–ø—É—â–µ–Ω")
    time.sleep(0.1)
    # show_programs()
    # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è hw –∏ daemon
    # control_managers = {}
    for pid in [1, 2, 3]:
        cm = ControlManager(press_id=pid, config=hw_config)
        cm.start()
        control_managers[pid] = cm
        # –°–æ–∑–¥–∞—ë–º PressController, –Ω–æ –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º
        press_controllers[pid] = PressController(press_id=pid, config=hw_config)

    cmd_thread = threading.Thread(target=command_loop, daemon=True)
    cmd_thread.start()

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    web_ui = WebInterface(host="0.0.0.0", port=5000)
    web_ui.start()
    logging.info("M –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω (http://localhost:5000)")

    try:
        while running:
            time.sleep(0.1)
    except KeyboardInterrupt:
        logging.info("M –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C).")
    finally:
        cleanup()


if __name__ == "__main__":
    main()
