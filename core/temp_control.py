# core/temp_control.py
"""
–ú–Ω–æ–≥–æ–∑–æ–Ω–Ω—ã–π on/off –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º.
–£–ø—Ä–∞–≤–ª—è–µ—Ç 8 –∑–æ–Ω–∞–º–∏ –Ω–∞–≥—Ä–µ–≤–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ.
–†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ global_state (—à–∏–Ω–∞ –∫–æ–º–∞–Ω–¥).
"""
import json
import logging
import os
import sys
import threading
import time
from typing import Optional, List

from core.global_state import state
from core.pid_controller import PIDController

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç–∏
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
if project_root not in sys.path:
    sys.path.insert(0, project_root)


class TemperatureController(threading.Thread):
    def __init__(self, id_press: int):
        super().__init__(daemon=True)
        self._pwm_start = {}
        self.press_id = id_press
        self.running = True

        self.config_path = os.path.join("config", "hardware_config.json")
        with open(self.config_path, "r", encoding="utf-8") as f:
            self.config = json.load(f)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–µ—Å—Å–∞
        press_cfg = self.config["presses"][id_press - 1]
        self.ai_module = press_cfg["modules"]["ai"]
        self.do_module = press_cfg["modules"]["do"]
        self.heater_channels = press_cfg["heater_channels"]  # [0,1,2,3,4,5,6,7] –∏–ª–∏ [8,9,...]

        self.zones = len(self.heater_channels)
        self.targets = [None] * self.zones
        self.enabled = [True] * self.zones
        self.heating = [False] * self.zones

        logging.info(f"TC –ü—Ä–µ—Å—Å-{id_press+ 1}: TemperatureController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ú–æ–¥—É–ª—å {self.do_module}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
        self.pids = []
        self.offsets = []
        self.pwm_period = 10.0
        self.load_config(self.press_id)

    def load_config_(self, id_press: int):
        self.pids = []
        self.offsets = []
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
        with open("config/pid_config.json", "r") as f:
            pid_cfg = json.load(f)["presses"][id_press - 1]


        for zone_cfg in pid_cfg["zones"]:
            pid = PIDController(
                Kp=zone_cfg["Kp"],
                Ki=zone_cfg["Ki"],
                Kd=zone_cfg["Kd"],
                output_limits=(0, 100)  # % –≤–∫–ª—é—á–µ–Ω–∏—è
            )
            self.pids.append(pid)

    def load_config(self, id_press: int):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ü–ò–î –±–µ–∑ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            with open("config/pid_config.json", "r") as f:
                pid_cfg = json.load(f)["presses"][id_press - 1]

            self.pwm_period = pid_cfg["pwm_period"]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö PID
            for i, zone_cfg in enumerate(pid_cfg["zones"]):
                if i < len(self.pids):
                    self.pids[i].set_tunings(
                        Kp=zone_cfg["Kp"],
                        Ki=zone_cfg["Ki"],
                        Kd=zone_cfg["Kd"]
                    )
                else:
                    # –ï—Å–ª–∏ –∑–æ–Ω –±–æ–ª—å—à–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ PID
                    pid = PIDController(
                        Kp=zone_cfg["Kp"],
                        Ki=zone_cfg["Ki"],
                        Kd=zone_cfg["Kd"],
                        output_limits=(0, 100)
                    )
                    self.pids.append(pid)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ñ—Ñ—Å–µ—Ç—ã
            self.offsets = [zone["offset"] for zone in pid_cfg["zones"]]

            logging.debug(f"TC –ü—Ä–µ—Å—Å-{id_press + 1}: –ü–ò–î-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –ª–µ—Ç—É")

        except Exception as e:
            logging.error(f"TC –ü—Ä–µ—Å—Å-{id_press + 1}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PID-–∫–æ–Ω—Ñ–∏–≥–∞: {e}")

    def read_all_temperatures(self) -> List[Optional[float]]:
        """–ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö 8 —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –∏–∑ global_state (—à–∏–Ω—ã)"""
        try:
            temps = state.read_ai(self.press_id)  # ‚úÖ –ß–∏—Ç–∞–µ–º —á–µ—Ä–µ–∑ —à–∏–Ω—É
            if not temps or len(temps) < 7:
                logging.warning(f"TC –ü—Ä–µ—Å—Å-{self.press_id+ 1}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")
                return [None] * 7
            return temps
        except Exception as e:
            logging.error(f"TC –ü—Ä–µ—Å—Å-{self.press_id+ 1}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä: {e}")
            return [None] * 7

    def _update_do_output(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç DO, –≤–∫–ª—é—á–∞—è/–≤—ã–∫–ª—é—á–∞—è –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
        for c_zone in range(self.zones):
            ch = self.heater_channels[c_zone]  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∏—Ç –Ω–∞ DO-–º–æ–¥—É–ª–µ
            desired = self.heating[c_zone]
            print(f"TC heat {self.do_module}, {ch}, {desired}")
            state.write_do_bit(self.do_module, ch, desired)

    def cool_all(self):
        self.running = False
        state.set(f"press_{self.press_id}_target_temp", None)
        for ch in self.heater_channels:
            # state.write_do_bit(self.do_module, ch, False)
            state.set_do_command(self.do_module, 0, 0, urgent=False)

    def run(self):
        logging.info(f"TC –ü—Ä–µ—Å—Å-{self.press_id+ 1}: –ø–æ—Ç–æ–∫ –Ω–∞–≥—Ä–µ–≤–∞ –∑–∞–ø—É—â–µ–Ω")
        last_mod = 0
        while self.running:

            config_path = "config/pid_config.json"
            try:
                mod_time = os.path.getmtime(config_path)
                if mod_time > last_mod:
                    self.load_config(self.press_id)
                    last_mod = mod_time
            except OSError:
                pass

            self.update()
            time.sleep(0.1)

    def update(self):
        target_temp = state.get(f"press_{self.press_id}_target_temp")
        # if target is None
        if target_temp is None:
            # üî• –í—ã–∫–ª—é—á–∞–µ–º –¢–û–õ–¨–ö–û —Å–≤–æ–∏ –∫–∞–Ω–∞–ª—ã
            current_state = state.read_digital(self.do_module) or 0
            new_state = current_state

            for ch in self.heater_channels:
                mask = 1 << ch
                new_state &= ~mask  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∏—Ç

            if current_state != new_state:
                low = new_state & 0xFF
                high = (new_state >> 8) & 0xFF
                state.set_do_command(self.do_module, low, high, urgent=True)
                logging.info(f"TC –ü—Ä–µ—Å—Å-{self.press_id+1}: –Ω–∞–≥—Ä–µ–≤ –≤—ã–∫–ª—é—á–µ–Ω (target_temp = None) ")
                logging.debug(f"TC Command{self.do_module, low, high}")
            return

        temps = self.read_all_temperatures()
        # üî• –ß–∏—Ç–∞–µ–º –¢–ï–ö–£–©–ï–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ DO-–º–æ–¥—É–ª—è
        current_state = state.read_digital(self.do_module) or 0
        new_state = current_state  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–∏ –±–∏—Ç—ã
        my_channels = self.heater_channels  # [0,1,2,3] –¥–ª—è –ü—Ä–µ—Å—Å–∞ 1, [4,5,6,7] –¥–ª—è –ü—Ä–µ—Å—Å–∞ 2

        for cur_zone, ch in enumerate(my_channels):
            temp_list = temps[cur_zone]
            if temp_list is None:
                continue

            # PID
            self.pids[cur_zone].set_setpoint(target_temp)

            # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ö–æ–¥
            output = self.pids[cur_zone].compute(temps[cur_zone])
            state.set(f"press_{self.press_id}_temp{cur_zone}_pid", round(output, 2))
            should_heat = output > 10  # >10% ‚Üí –≤–∫–ª—é—á–∞–µ–º

            mask = 1 << ch

            if output >= 100.0:
                # üî• –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ
                new_state |= mask
            elif output <= 10.0:
                # ‚ùå –í—Å–µ–≥–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–æ
                new_state &= ~mask
            else:
                # üåÄ –®–ò–ú: 10% < output < 100%
                on_time = (output / 100.0) * self.pwm_period
                off_time = self.pwm_period - on_time

                # –ë–∞–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî timestamp –∑–æ–Ω—ã
                if not hasattr(self, '_pwm_start'):
                    self._pwm_start = {}
                if cur_zone not in self._pwm_start:
                    self._pwm_start[cur_zone] = time.time()

                dt = time.time() - self._pwm_start[cur_zone]
                phase = dt % self.pwm_period

                if phase < on_time:
                    new_state |= mask  # ON
                else:
                    new_state &= ~mask  # OFF

        # üî• –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if current_state != new_state:
            low = new_state & 0xFF
            high = (new_state >> 8) & 0xFF
            state.set_do_command(self.do_module, low, high, urgent=False)

    def stop(self):
        logging.info(f"TC –ü—Ä–µ—Å—Å-{self.press_id+ 1}: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.running = False


# -----------------------------
# –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: __main__
# -----------------------------

if __name__ == "__main__":
    import os


    def clear_screen():
        sys.stdout.write("\033[H")
        sys.stdout.write("\033[J")
        sys.stdout.flush()


    def clear_line(count=1):
        for _ in range(count):
            sys.stdout.write("\033[K")
            sys.stdout.write("\033[A")
        sys.stdout.write("\033[B" * count)
        sys.stdout.flush()


    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TemperatureController ‚Äî –º–Ω–æ–≥–æ–∑–æ–Ω–Ω—ã–π –Ω–∞–≥—Ä–µ–≤")

    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1 ‚Äî –ú–æ–∫-—Ä–µ–∂–∏–º (–∏–º–∏—Ç–∞—Ü–∏—è)")
    print("2 ‚Äî –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (–∂–µ–ª–µ–∑–æ)")
    choice = input("> ").strip()

    if choice == "1":
        print("‚úÖ –ú–æ–∫-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ----")
    elif choice == "2":
        from core.hardware_interface import HardwareInterface

        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        config_path = os.path.join(project_root, "config", "system.json")

        if not os.path.exists(config_path):
            print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            exit(1)

        try:
            hw = HardwareInterface(config_path)
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            exit(1)

    try:
        press_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ—Å—Å–∞ (1,2,3): "))
        if press_id not in (1, 2, 3):
            raise ValueError
    except:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
        exit(1)

    # tc = TemperatureController(press_id=press_id, hardware_interface=hw)
    # test
    tc = TemperatureController(id_press=press_id)
    print(f"\nüîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–µ–≤–æ–º –ø—Ä–µ—Å—Å–∞ {press_id} –∑–∞–ø—É—â–µ–Ω–æ")

    while True:
        clear_screen()
        print(f"üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–ì–†–ï–í–û–ú ‚Äî –ü—Ä–µ—Å—Å {press_id}")
        print("1 ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Å—Ç–∞–≤–∫—É –¥–ª—è –∑–æ–Ω—ã")
        print("2 ‚Äî –û—Ç–∫–ª—é—á–∏—Ç—å –∑–æ–Ω—É")
        print("3 ‚Äî –û—Ç–∫–ª—é—á–∏—Ç—å –≤–µ—Å—å –Ω–∞–≥—Ä–µ–≤")
        print("4 ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–æ–Ω")
        print("5 ‚Äî –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–µ)")
        print("6 ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Å—Ç–∞–≤–∫—É –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω –∏ –Ω–∞—á–∞—Ç—å –Ω–∞–≥—Ä–µ–≤")
        print("0 ‚Äî –í—ã—Ö–æ–¥")
        print("-" * 50)

        cmd = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if cmd == "1":
            try:
                zone = int(input("–ó–æ–Ω–∞ (1‚Äì8): ")) - 1
                temp = float(input("–£—Å—Ç–∞–≤–∫–∞ (¬∞C): "))
                # Need refactor
                # tc.set_target(zone, temp)
                input("–ù–∞–∂–º–∏—Ç–µ Enter...")
            except:
                print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
                time.sleep(1)

        elif cmd == "2":
            try:
                zone = int(input("–ó–æ–Ω–∞ (1‚Äì8): ")) - 1
                # tc.disable_zone(zone)
                input("–ù–∞–∂–º–∏—Ç–µ Enter...")
            except:
                print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
                time.sleep(1)

        elif cmd == "3":
            tc.cool_all()
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")

        elif cmd == "4":
            temps = tc.read_all_temperatures()
            # status = tc.update()
            # print("\nüìä –°—Ç–∞—Ç—É—Å –∑–æ–Ω:")
            # for z in range(8):
            #     t = temps[z] if temps[z] is not None else "N/A"
            #     s = status[z]
            #     print(f"  –ó–æ–Ω–∞ {z + 1}| {s}")
            # input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")

        elif cmd == "5":
            print("\nüìä –†–ï–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø ‚Äî –ü—Ä–µ—Å—Å {press_id} (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
            print("–ó–æ–Ω–∞ | –¢–µ–º–ø | –£—Å—Ç–∞–≤–∫–∞ | –ö–æ–º–∞–Ω–¥–∞ | –†–µ–∞–ª—å–Ω–æ | –°—Ç–∞—Ç—É—Å")
            print("-----|------|---------|---------|---------|---------")
            for _ in range(8):
                print("     |      |         |         |         |         ")
            try:
                while True:
                    clear_screen()
                    print(f"üìä –†–ï–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø ‚Äî –ü—Ä–µ—Å—Å {press_id} (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
                    print("–ó–æ–Ω–∞ | –¢–µ–º–ø | –£—Å—Ç–∞–≤–∫–∞ | –ö–æ–º–∞–Ω–¥–∞ | –†–µ–∞–ª—å–Ω–æ | –°—Ç–∞—Ç—É—Å")
                    print("-----|------|---------|---------|---------|---------")

                    temps = tc.read_all_temperatures()
                    status = tc.update()

                    # for z in range(8):
                    #     t = f"{temps[z]:>4.1f}" if temps[z] is not None else " N/A"
                    #     target = f"{status[z]['target']:>5.1f}" if status[z]['target'] is not None else "  N/A"
                    #     cmd = " –í–ö–õ " if status[z]['heating_cmd'] else " –í–´–ö "
                    #     real = " –í–ö–õ " if status[z]['heating_bit'] else " –í–´–ö "
                    #     stat = f"{status[z]['status']:^7}"

                    # print(f" {z + 1}  | {t} |  {target} | {cmd} | {real} | {stat}")
                    time.sleep(1.0)

            except KeyboardInterrupt:
                print("\n\n–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")

        elif cmd == "6":
            try:
                temp = float(input("–í–≤–µ–¥–∏—Ç–µ —É—Å—Ç–∞–≤–∫—É –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω (¬∞C): "))
                # tc.set_target_all(temp)
                print(f"‚úÖ –£—Å—Ç–∞–≤–∫–∞ {temp}¬∞C –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–æ –≤—Å–µ–º –∑–æ–Ω–∞–º")
                input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                time.sleep(1)

        elif cmd == "0":
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            if choice == "2":
                hw.close()
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            time.sleep(1)
