# core/hardware_interface.py

import json
import time
import logging
import os
from typing import Optional, List, Dict, Any, Union
from core.global_state import state  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
import threading

# –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pyserial –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
try:
    import serial
except ImportError:
    serial = None

# –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è hardware_interface
hardware_logger = logging.getLogger('HardwareInterface')
hardware_logger.setLevel(logging.INFO)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
if not hardware_logger.handlers:
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    import os
    os.makedirs("logs", exist_ok=True)
    handler = logging.FileHandler('logs/hardware.log', encoding='utf-8')
    formatter = logging.Formatter('%(asctime)s [HI] %(levelname)s: %(message)s')
    handler.setFormatter(formatter)
    hardware_logger.addHandler(handler)

# üî• –ö–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –æ—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –Ω–∞–≤–µ—Ä—Ö
hardware_logger.propagate = False


def _simulate_response(command: str) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
    if command.startswith("$"):
        return "!317017"
    elif command.startswith("#") and "00" not in command and "0B" not in command:
        return "+0000+0015+0023+0040+0055"
    elif command.startswith("@"):
        return ">1234"
    return "OK"


def _is_urgent_module(module_id: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ä–æ—á–Ω—ã–π –ª–∏ –º–æ–¥—É–ª—å (–∫–ª–∞–ø–∞–Ω—ã, –ª–∞–º–ø—ã)"""
    # –ü—Ä–∏–º–µ—Ä: DO-–º–æ–¥—É–ª–∏ 37, 38, 39 ‚Äî —Å—Ä–æ—á–Ω—ã–µ; 34 ‚Äî –Ω–∞–≥—Ä–µ–≤
    urgent_modules = {"37", "38", "39", "33", "32"}
    return module_id in urgent_modules


def _is_valid_response(command: str, response: str) -> bool:
    if not response:
        return False

    if command.startswith("#") and len(command) == 3:  # AI
        return '+' in response and len(response) > 10
    elif command.startswith("@"):  # DI
        return '>' in response and any(c in '0123456789ABCDEF' for c in response.split('>')[-1])
    elif command.startswith("$"):  # Ping
        return '!' in response
    elif command.startswith("#") and ">" in response:
        return True  # ‚Üê –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    return True


class HardwareInterface:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DCON-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º—ã: real (COM-–ø–æ—Ä—Ç) –∏ simulation (simulator.py).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
    - HardwareDaemon ‚Äî –¥–ª—è –ø—Ä—è–º–æ–≥–æ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏.
    - diagnose.py ‚Äî –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    - –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å global_state.
    """

    def __init__(self, config_path: str = "config/system.json", direct_mode: bool = False):
        self.config_path = config_path
        self.direct_mode = direct_mode  # ‚úÖ –ù–æ–≤—ã–π —Ñ–ª–∞–≥
        self.config = self._load_config()
        self.mode = self.config.get("mode", "simulation")  # real / simulation
        self.baudrate = self.config.get("baudrate", 9600)
        self.timeout = self.config.get("timeout", 1.0)
        self.lock = threading.RLock()  # üî• –î–æ–±–∞–≤–ª–µ–Ω–æ
        hardware_logger.info(f"HI Lock —Å–æ–∑–¥–∞–Ω: {id(self.lock)}")
        self.stats = {
            "total_commands": 0,
            "good_responses": 0,
            "bad_responses": 0,
            "mid_responses": 0,
            "ai_responses": 0,
            "di_responses": 0,
            "do_responses": 0,
            "commands_by_module": {},
            "last_reset": time.time()
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        config_path = os.path.join(project_root, "config", "hardware_config.json")

        with open(config_path, "r", encoding="utf-8") as f:
            self.hw_config = json.load(f)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._initialize_interface()

    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ system.json"""
        try:
            with open(self.config_path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            hardware_logger.error(f"HI –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: {e}")
            raise

    def _initialize_interface(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è COM –∏–ª–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"""
        if self.mode == "real":
            port = self.config.get("com_port", "COM1")
            if serial is None:
                raise ImportError("HI pyserial –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyserial")
            try:
                self.serial = serial.Serial(
                    port=port,
                    baudrate=self.baudrate,
                    timeout=self.timeout,
                    bytesize=8,
                    stopbits=1,
                    parity='N'
                )
                hardware_logger.info(f"HI COM-–ø–æ—Ä—Ç {port} –æ—Ç–∫—Ä—ã—Ç.")
            except Exception as e:
                hardware_logger.error(f"HI –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è COM-–ø–æ—Ä—Ç–∞: {e}")
                raise
        else:
            hardware_logger.info("HI –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            self.serial = None

    def _send_command(self, command: str) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–æ–¥—É–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if command.startswith(("$", "#", "@")) and len(command) >= 3:
            module_id = command[1:3]
            self.stats["commands_by_module"][module_id] = self.stats["commands_by_module"].get(module_id, 0) + 1

        try:
            if self.mode == "real":
                # time.sleep(0.2)
                if self.serial.in_waiting:
                    self.serial.reset_input_buffer()
                    time.sleep(0.1)

                # –û—Ç–ø—Ä–∞–≤–∫–∞
                self.serial.write((command + "\r\n").encode())

                # ‚è∏Ô∏è –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ AI-–∑–∞–ø—Ä–æ—Å–∞
                if command.startswith("#") and len(command) == 3:
                    time.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ

                # üîÅ –†—É—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                raw = b''
                start_time = time.time()
                while (time.time() - start_time) < 0.3:  # –ú–∞–∫—Å 500 –º—Å
                    if self.serial.in_waiting:
                        byte = self.serial.read(1)
                        raw += byte
                        # –£—Å–ª–æ–≤–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è: \n –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
                        if byte == b'\n' or len(raw) > 100:
                            break
                    else:
                        time.sleep(0.01)  # –ù–µ –≥—Ä—É–∑–∏–º CPU

                response = raw.decode('utf-8', errors='ignore').strip()
                #if (len(response) > 5 and len(response) != 57) or len(response) <= 4:
                    #hardware_logger.info(f"HI DCON: {command} -> {response}")
                    #return None
                if command.startswith("#") and len(command) >= 4:
                    self.stats["do_responses"] += 0.5
                    #print(f"HI DCON: {command} -> {response}")

                # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
                is_good = _is_valid_response(command, response)

                if is_good:
                    self.stats["good_responses"] += 1
                else:
                    self.stats["bad_responses"] += 1
                    hardware_logger.info(f"HI DCON: {command} -> {response}")

                    if self.serial.in_waiting:
                        self.serial.reset_input_buffer()
                    time.sleep(0.05)  # –î–∞—ë–º —à–∏–Ω–µ "–ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å"

                return response if is_good else None

            else:
                # logging.info(f"HI SIM: {command}")
                return _simulate_response(command)
        except Exception as e:
            hardware_logger.error(f"HI –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã '{command}': {e}")
            # time.sleep(2)
            return None

    def read_ai(self, module_id: str) -> List[str]:
        """
        –ß–∏—Ç–∞–µ—Ç –≤—Å–µ 8 –∑–Ω–∞—á–µ–Ω–∏–π —Å AI-–º–æ–¥—É–ª—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫: ['0020.8', '0020.5', ...]
        """
        command = f"#{module_id}"
        response = self._send_command(command)
        self.stats["ai_responses"] += 1
        # hardware_logger.info(f"HI DCON: {command} -> {response}")

        if not response:
            return None

        # ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ—á–∏—Å—Ç–∫–æ–π
        clean = response.strip().lstrip('>').strip()
        if not clean.startswith('+'):
            return None

        values = []
        for part in clean.split('+'):
            cleaned = ''.join(c for c in part.strip() if c.isdigit() or c == '.')
            if cleaned and cleaned.count('.') <= 1:
                values.append(cleaned)
        return values if len(values) >= 8 else None

    def read_digital(self, module_id: Union[str, int]) -> Optional[int]:
        """–ß—Ç–µ–Ω–∏–µ DI/DO: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 16-–±–∏—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        try:
            mid = f"{int(module_id):02d}"
            command = f"@{mid}"
            response = self._send_command(command)
            #if int(module_id) ==34:
                #print(f"HI2 DCON: {command} -> {response}")
            self.stats["di_responses"] += 1
            if response and response.startswith('>'):
                hex_str = response[1:].strip()
                return int(hex_str, 16)
            return None
        except Exception as e:
            hardware_logger.error(f"HI RD –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DI/DO —Å –º–æ–¥—É–ª—è {module_id}: {e}")
            self.stats["mid_responses"] += 1
            time.sleep(0.2)
            mid = f"{int(module_id):02d}"
            command = f"@{mid}"
            response = self._send_command(command)
            # hardware_logger.info(f"HI2 DCON: {command} -> {response}")

            if response and response.startswith('>'):
                hex_str = response[1:].strip()
                fix = int(hex_str, 16)
                hardware_logger.error(f"HI RD fix")
                return fix
            hardware_logger.error(f"HI RD 2 -–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DI/DO —Å –º–æ–¥—É–ª—è {module_id}: {e}")
            return None

    def write_do(self, module_id: Union[str, int], byte_low: int = 0, byte_high: int = 0):
        """
        –ó–∞–ø–∏—Å—å DO: —Å—Ç–∞–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å global_state.
        –û—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ HardwareDaemon.
        """
        mid = f"{int(module_id):02d}"
        cmd_low = f"#{mid}00{byte_low:02X}"
        cmd_high = f"#{mid}0B{byte_high:02X}"
        #print(f"HI write_do –≤—ã–∑–≤–∞–Ω: module={module_id}, low={byte_low:02X}, high={byte_high:02X}")
        hardware_logger.info(f"HI write_do –≤—ã–∑–≤–∞–Ω: module={module_id}, low={byte_low:02X}, high={byte_high:02X}")
        if self.direct_mode:
            # ‚úÖ –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚Äî –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º —Ä–µ–∂–∏–º–µ
            self._send_command(cmd_low)
            time.sleep(0.1)
            self._send_command(cmd_high)
            #self.stats["do_responses"] += 1
            # hardware_logger.info(f"DO: –º–æ–¥—É–ª—å {mid}, low=0x{byte_low:02X}, high=0x{byte_high:02X} (–ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)")
        else:
            #self.stats["do_responses"] += 1
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if _is_urgent_module(mid):
                urgent_queue = state.get("urgent_do", {})
                urgent_queue[mid] = (byte_low, byte_high)
                state.set("urgent_do", urgent_queue)
                hardware_logger.info(f"HI DO: –º–æ–¥—É–ª—å {mid}, low=0x{byte_low:02X}, high=0x{byte_high:02X} (–≤ –æ—á–µ—Ä–µ–¥—å: —Å—Ä–æ—á–Ω–æ)")
            else:
                heating_queue = state.get("heating_do", {})
                heating_queue[mid] = (byte_low, byte_high)
                state.set("heating_do", heating_queue)
                hardware_logger.info(f"HI DO: –º–æ–¥—É–ª—å {mid}, low=0x{byte_low:02X}, high=0x{byte_high:02X} (–≤ –æ—á–µ—Ä–µ–¥—å: –Ω–∞–≥—Ä–µ–≤)")

    def write_do_bit(self, module_id: Union[str, int], channel: int, on: bool):
        """
        –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ–¥–∏–Ω –∫–∞–Ω–∞–ª (–±–∏—Ç) –Ω–∞ DO-–º–æ–¥—É–ª–µ.
        –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∑–∞—Ç–µ–º –∏–∑–º–µ–Ω—è–µ—Ç –æ–¥–∏–Ω –±–∏—Ç.
        """
        if not (0 <= channel <= 15):
            hardware_logger.error(f"HI –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: {channel}. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 0‚Äì15")
            return False

        try:
            with self.lock:  # üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —à–∏–Ω—ã
                # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                current = self.read_digital(module_id)
                if current is None:
                    #hardware_logger.error(f"HI WDB –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ DO-{module_id}")
                    current = self.read_digital(module_id)
                    if current is None:
                        hardware_logger.error(f"HI WDB 2- –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ DO-{module_id}")
                        time.sleep(0.2)
                        # time.sleep(5)
                        return False

                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                mask = 1 << channel
                new_state = current | mask if on else current & ~mask

                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ low –∏ high –±–∞–π—Ç—ã
                low_byte = new_state & 0xFF
                high_byte = (new_state >> 8) & 0xFF

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º
                mid = f"{int(module_id):02d}"
                low = f"#{mid}00{low_byte:02X}"
                high = f"#{mid}0B{high_byte:02X}"
                self._send_command(f"#{mid}00{low:02X}")
                time.sleep(0.05)
                self._send_command(f"#{mid}0B{high:02X}")
                # self.write_do(module_id, low_byte, high_byte)
                self.stats["do_responses"] += 1
                # hardware_logger.info(f"HI DO-{module_id}.{channel} {'–í–ö–õ' if on else '–í–´–ö–õ'} (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state:04X})")
            return True

        except Exception as e:
            hardware_logger.error(f"HI –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º {channel} –Ω–∞ DO-{module_id}: {e}")
            time.sleep(0.2)
            return False

    def log_quality_report(self):
        now = time.time()
        period = now - self.stats["last_reset"]
        total = self.stats["total_commands"]
        good = self.stats["good_responses"]
        bad = self.stats["bad_responses"]
        mid = self.stats["mid_responses"]
        ai = self.stats["ai_responses"]
        di = self.stats["di_responses"]
        do = self.stats["do_responses"]
        by_mod = self.stats["commands_by_module"]
        total = good + bad

        #print(period, total, good, bad)
        if total > 0:
            quality = (good / total) * 100
            speed = total/period
            hardware_logger.info("-------------------------------------------------------")
            hardware_logger.info(
                f" DCON Quality: {quality:.1f}% ({good}/{total}) "
                f"[Good: {good}, Bad: {bad}] over {period:.1f}s, speed {speed}com/s, AI {ai}, DI {di}, DO {do}, MID {mid}"
            )
            hardware_logger.info(f"{by_mod}")
        # üîÅ –û–±–Ω–æ–≤–ª—è–µ–º state –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        state.set("dcon_stats", {
            "total": total,
            "good": good,
            "bad": bad,
            "quality": round(quality, 1) if total > 0 else 0.0,
            "speed": round(speed, 1),
            "by_module": self.stats["commands_by_module"].copy(),
            "ai": ai,
            "di": di,
            "do": do,
            "mid": mid,
            "period": round(period, 1)
        })


        # –°–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        self.stats = {
            "total_commands": 0,
            "good_responses": 0,
            "bad_responses": 0,
            "mid_responses": 0,
            "ai_responses": 0,
            "di_responses": 0,
            "commands_by_module": {},
            "do_responses": 0,
            "last_reset": now
        }

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.mode == "real" and self.serial and self.serial.is_open:
            self.serial.close()
            hardware_logger.info("HI COM-–ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç.")


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∞
    hw = HardwareInterface("config/system.json")
    print("AI-08:", hw.read_ai("17"))
    print("DI/DO 37:", hex(hw.read_digital(37)))
    hw.write_do(37, 0x01, 0x00)
    hw.close()
