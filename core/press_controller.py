# core/press_controller.py
import threading
import logging
import time
import json
import os
import sys
from typing import Dict, Any, List
from core.step_executor import StepExecutor
from core.safety_monitor import SafetyMonitor
from core.global_state import state


class PressController(threading.Thread):
    def __init__(self, press_id: int, config: dict):
        super().__init__(name=f"PressCtrl-{press_id}", daemon=True)
        self.press_id = press_id
        self.running = False
        self.completed = False
        self.paused = False
        self.config = config  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º
        self.current_step_index = 0
        self.executor: StepExecutor = None

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –û–ë–©–ò–ô SafetyMonitor –∏–∑ ControlManager
        self.safety = state.safety_monitors.get(press_id)
        if not self.safety:
            logging.warning(f"–†–° –ü—Ä–µ—Å—Å-{press_id}: –æ–±—â–∏–π SafetyMonitor –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π")
            self.safety = SafetyMonitor(press_id)
            state.safety_monitors[press_id] = self.safety

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        try:
            with open(f"programs/press{self.press_id}.json", "r", encoding="utf-8") as f:
                program = json.load(f)
            temp_prog = program.get("temp_program", [])
            press_prog = program.get("pressure_program", [])
        except Exception as e:
            logging.error(f"–†–° –ü—Ä–µ—Å—Å-{self.press_id}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
            return

        if not temp_prog and not press_prog:
            logging.error(f"–†–° –ü—Ä–µ—Å—Å-{self.press_id}: –æ–±–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—É—Å—Ç—ã")
            return

        state.set(f"press_{self.press_id}_running", True)
        state.set(f"press_{self.press_id}_paused", False)
        state.set(f"press_{self.press_id}_completed", False)
        self.running = True
        self.completed = False
        logging.info("=====================================================================================")
        logging.info(f"–†–° –ü—Ä–µ—Å—Å-{self.press_id}: –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã (temp: {len(temp_prog)}, pressure: {len(press_prog)})")
        # logging.info(f"–†–° –ü—Ä–µ—Å—Å-{self.press_id}: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ({program})")

        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º StepExecutor
        self.executor = StepExecutor(self.press_id)
        self.executor.load_programs(temp_prog, press_prog)
        self.executor.start()

        logging.info(f"–†–° –ü—Ä–µ—Å—Å-{self.press_id}: StepExecutor –∑–∞–ø—É—â–µ–Ω")

        logging.info("=====================================================================================")
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: —Å–ª–µ–¥–∏–º –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        while self.running and self.safety.is_safe():
            # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî StepExecutor —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–º
            time.sleep(0.1)

        # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞ ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º executor
        if self.executor and self.executor.is_alive():
            logging.info(f"–†–° –ü—Ä–µ—Å—Å-{self.press_id}: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ StepExecutor")
            self.executor.stop()
            self.executor.join(timeout=1.0)

        state.set(f"press_{self.press_id}_running", False)
        state.set(f"press_{self.press_id}_paused", False)
        state.set(f"press_{self.press_id}_completed", True)
        self.running = False
        self.completed = True
        logging.info(f"–†–° –ü—Ä–µ—Å—Å-{self.press_id}: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    def stop(self):
        if not self.running:
            return

        logging.info(f"–†–° –ü—Ä–µ—Å—Å-{self.press_id}: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
        self.running = False
        state.set(f"press_{self.press_id}_running", False)
        state.set(f"press_{self.press_id}_paused", False)
        state.set(f"press_{self.press_id}_completed", True)
        # 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å StepExecutor
        if self.executor and self.executor.is_alive():
            self.executor.stop()
            self.executor.join(timeout=1.0)

        # 2. –°–±—Ä–æ—Å–∏—Ç—å —É—Å—Ç–∞–≤–∫—É
        state.set(f"press_{self.press_id}_target_temp", None)
        state.set(f"press_{self.press_id}_target_pressure", 0.0)

        # 3. –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å—ë –Ω–∞ DO
        do_module = self.config["presses"][self.press_id - 1]["modules"]["do"]
        urgent = state.get("urgent_do", {})
        urgent[do_module] = (0, 0)
        state.set("urgent_do", urgent)

        # state.write_do(do_module, 0, 0)

        # 4. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        state.set(f"press_{self.press_id}_step_status_temperature", "stopped")
        state.set(f"press_{self.press_id}_step_status_pressure", "stopped")

        logging.info(f"–†–° –ü—Ä–µ—Å—Å-{self.press_id}: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–≤–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

    def emergency_stop(self):
        """–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        logging.warning(f"–†–° –ü—Ä–µ—Å—Å-{self.press_id}: –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞!")
        self.running = False
        if self.executor and self.executor.is_alive():
            self.executor.stop()
        self.safety.emergency = True

    def pause(self):
        """–ü–∞—É–∑–∞"""
        state.set(f"press_{self.press_id}_paused", True)
        self.paused = True
        state.set(f"press_{self.press_id}_step_status", "paused")
        logging.info(f"–†–° –ü—Ä–µ—Å—Å-{self.press_id}: –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.")


# -----------------------------
# –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: __main__
# -----------------------------

if __name__ == "__main__":
    def clear_screen():
        sys.stdout.write("\033[H")
        sys.stdout.write("\033[J")
        sys.stdout.flush()


    def clear_line(count=1):
        for _ in range(count):
            sys.stdout.write("\033[K")
            sys.stdout.write("\033[A")
        sys.stdout.write("\033[B" * count)
        sys.stdout.flush()


    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PressController ‚Äî –º–Ω–æ–≥–æ–∑–æ–Ω–Ω—ã–π –Ω–∞–≥—Ä–µ–≤")

    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1 ‚Äî –ú–æ–∫-—Ä–µ–∂–∏–º (–∏–º–∏—Ç–∞—Ü–∏—è)")
    print("2 ‚Äî –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (–∂–µ–ª–µ–∑–æ)")
    choice = input("> ").strip()

    if choice == "1":
        from core.mock_hardware import MockHardwareInterface

        hw = MockHardwareInterface()
        print("‚úÖ –ú–æ–∫-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    elif choice == "2":
        from core.hardware_interface import HardwareInterface
        import os

        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        config_path = os.path.join(project_root, "config", "system.json")

        if not os.path.exists(config_path):
            print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            exit(1)

        try:
            hw = HardwareInterface(config_path)
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            exit(1)

    try:
        press_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ—Å—Å–∞ (1,2,3): "))
        if press_id not in (1, 2, 3):
            raise ValueError
    except:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
        exit(1)

    pc = PressController(press_id=press_id, hardware_interface=hw)
    print(f"\nüîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å—Å–æ–º {press_id} –∑–∞–ø—É—â–µ–Ω–æ")

    while True:
        clear_screen()
        print(f"üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ï–°–°–û–ú ‚Äî –ü—Ä–µ—Å—Å {press_id}")
        print("1 ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
        print("2 ‚Äî –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        print("3 ‚Äî –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å")
        print("4 ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        print("5 ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("0 ‚Äî –í—ã—Ö–æ–¥")
        print("-" * 50)

        cmd = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if cmd == "1":
            if not pc.running:
                pc.start()
                print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è –£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")

        elif cmd == "2":
            if pc.running and not pc.paused:
                pc.pause()
                print("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print("‚ö†Ô∏è –ù–µ–ª—å–∑—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")

        elif cmd == "3":
            if pc.paused:
                pc.resume()
                print("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print("‚ö†Ô∏è –ù–µ–ª—å–∑—è –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å")
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")

        elif cmd == "4":
            if pc.running:
                pc.stop()
                print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print("‚ö†Ô∏è –£–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")

        elif cmd == "5":
            status = "–†–ê–ë–û–¢–ê–ï–¢" if pc.running else "–û–°–¢–ê–ù–û–í–õ–ï–ù"
            if pc.paused:
                status = "–ü–ê–£–ó–ê"
            if pc.completed:
                status = "–ó–ê–í–ï–†–®–Å–ù"

            print(f"\nüìä –°—Ç–∞—Ç—É—Å –ø—Ä–µ—Å—Å–∞ {press_id}: {status}")
            if pc.current_step_index >= 0:
                print(f"   –¢–µ–∫—É—â–∏–π —à–∞–≥: {pc.current_step_index + 1} / {len(pc.program)}")
            else:
                print("   –®–∞–≥: –Ω–µ –Ω–∞—á–∞—Ç")
            input("–ù–∞–∂–º–∏—Ç–µ Enter...")

        elif cmd == "0":
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            if choice == "2":
                hw.close()
            break

        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            time.sleep(1)
