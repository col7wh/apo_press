# core/global_state.py
"""
–ì–ª–æ–±–∞–ª—å–Ω–∞—è —à–∏–Ω–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.
"""

import threading
import traceback
from typing import Dict, Any, List, Optional, Union


class GlobalState:
    def __init__(self):
        self._data: Dict[str, Any] = {}
        self._lock = threading.RLock()
        self._hw = None
        self._daemon_mode = False
        self.safety_monitors = {}

    def set_hardware_interface(self, hw, daemon_mode: bool = False):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ HardwareDaemon)"""
        self._hw = hw
        #print(f"GS –ü–æ–¥–Ω—è—Ç HW daemon_mode = {daemon_mode}")
        self._daemon_mode = daemon_mode

    def read_ai(self, press_id: int) -> List[Optional[float]]:
        key = f"press_{press_id}_temps"
        with self._lock:
            return self._data.get(key, [None] * 8)

    def read_digital(self, module_id: Union[str, int]) -> Optional[int]:
        module_id = str(module_id)
        key = f"di_module_{module_id}"

        with self._lock:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º DI
            value = self._data.get(key)
            if value is not None:
                return value

            # –ï—Å–ª–∏ –Ω–µ—Ç DI ‚Äî –ø—Ä–æ–±—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ DO (–¥–ª—è –º–æ–¥—É–ª–µ–π —Ç–∏–ø–∞ 31, 34)
            do_key = f"do_state_{module_id}"
            value = self._data.get(do_key)
            #print(f"GS try read_digital {module_id}, cyr val in state {value} | –∫–µ–π {do_key}")
            #if value !=0: print("="*30)
            if value is not None:
                return value

            # –î–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            # logging.debug(f"STATE: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {key} –∏–ª–∏ {do_key}")
            #print(f"GS try read_digital {module_id}, byt not found whis key {do_key}")
            return 0  # –∏–ª–∏ None ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏

    def write_do(self, module_id: Union[str, int], low_byte: int, high_byte: int):
        """–í—Å–µ–≥–¥–∞ —Å—Ç–∞–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å urgent_do"""
        with self._lock:
            urgent = self._data.get("urgent_do", {})
            # –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
            urgent = urgent.copy() if urgent else {}
            urgent[f"{module_id}"] = (low_byte, high_byte)
            self._data["urgent_do"] = urgent
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            #print(f"STATE: DO-{module_id} –≤ –æ—á–µ—Ä–µ–¥—å: {low_byte:02X}, {high_byte:02X}")

    def write_do_bit(self, module_id: Union[str, int], channel: int, on: bool):

        current = self.read_digital(module_id)
        if current is None:
            return
        mask = 1 << channel
        new_state = (current | mask) if on else (current & ~mask)
        low = new_state & 0xFF
        high = (new_state >> 8) & 0xFF

        #if on:
            #print(f"reqest mod {module_id}, ch {channel} on {on}")
            #print(f"STATE: write_do_bit ‚Üí module={module_id}, current={current}, new_state={new_state}")  # üî• –î–æ–±–∞–≤—å —ç—Ç–æ
        self.write_do(module_id, low, high)

    def set(self, key: str, value: Any):
        with self._lock:
            self._data[key] = value
            if key.startswith("do_state_"):
                # üîç –ü–æ–ª—É—á–∞–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–∞
                stack = traceback.extract_stack()
                # –ë–µ—Ä—ë–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–æ —Å–∞–º set()
                filename, line, func, text = stack[-2]
                #print(f"üü° STATE: {key} = {value} | –ò–∑–º–µ–Ω–µ–Ω–æ –≤ {func} ({filename}:{line})")

    def get(self, key: str, default: Any = None) -> Any:
        with self._lock:
            return self._data.get(key, default)

    def __contains__(self, key: str) -> bool:
        with self._lock:
            return key in self._data

    def update(self, updates: Dict[str, Any]):
        with self._lock:
            self._data.update(updates)

    def clear(self):
        with self._lock:
            self._data.clear()

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è HardwareDaemon ---
    def get_urgent_do_commands(self) -> Dict[str, tuple]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Å—Ä–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã DO"""
        with self._lock:
            commands = self._data.get("urgent_do", {})
            self._data["urgent_do"] = {}
            return commands.copy()

    def get_heating_do_commands(self) -> Dict[str, tuple]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≥—Ä–µ–≤–∞"""
        with self._lock:
            commands = self._data.get("heating_do", {})
            self._data["heating_do"] = {}
            return commands.copy()

    def get_all(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ state.
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        """
        with self._lock:
            return self._data.copy()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑–≤–Ω–µ

    def set_do_state(self, module_id: str, value: int):
        with self._lock:
            self._data[f"do_state_{module_id}"] = value
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            stack = traceback.extract_stack()
            filename, line, func, text = stack[-2]
            # print(f"üü¢ DO_STATE: {module_id} = {value:04X} | {func} ({filename}:{line})")

# –ï–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
state = GlobalState()