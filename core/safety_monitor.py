# core/safety_monitor.py
import json
import logging
from core.global_state import state
import time

"""
–ú–æ–Ω–∏—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–µ—Å—Å–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ê–≤–∞—Ä–∏–π–Ω—É—é –∫–Ω–æ–ø–∫—É (E-Stop)
- –û–±—Ä—ã–≤ —Ç–µ—Ä–º–æ–ø–∞—Ä—ã
- –ü–µ—Ä–µ–≥—Ä–µ–≤
- –ö–æ–Ω—Ü–µ–≤—ã–µ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–∏ (–¥–≤–µ—Ä—å, –ø—Ä–µ—Å—Å)
–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏.
–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ global_state (—à–∏–Ω—É).
"""


class SafetyMonitor:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ—Å—Å–∞.
    """

    def __init__(self, press_id: int):
        self.press_id = press_id
        self.max_temperature = 250.0  # ¬∞C
        self.thermocouple_error_value = -10.0  # T <= 0 ‚Üí –æ–±—Ä—ã–≤

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑ hardware_config.json
        try:
            # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            import os
            project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            config_path = os.path.join(project_root, "config", "hardware_config.json")
            with open(config_path, "r", encoding="utf-8") as f:
                hw_config = json.load(f)
            self.press_config = hw_config["presses"][press_id - 1]
            self.di_module = hw_config["common"]["di_module"]
            self.di_module_2 = hw_config["common"]["di_module_2"]
        except Exception as e:
            logging.error(f"SM –ü—Ä–µ—Å—Å-{press_id}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            raise

        logging.info(f"SM –ü—Ä–µ—Å—Å-{press_id}: SafetyMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    def _read_input(self, name: str) -> bool:
        """
        –ß–∏—Ç–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
        –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–∏–ø: active_low / active_high.
        """
        try:
            inp = self.press_config["safety_inputs"][name]
            bit = inp["bit"]
            value = state.read_digital(inp["module"])
            if value is None:
                return False
            is_set = bool(value & (1 << bit))
            if inp["type"] == "active_low":
                return not is_set  # 0 = –∞–∫—Ç–∏–≤–µ–Ω
            else:  # active_high
                return is_set  # 1 = –∞–∫—Ç–∏–≤–µ–Ω
        except Exception as e:
            logging.error(f"SM –ü—Ä–µ—Å—Å-{self.press_id}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {name}: {e}")
            return False

    def check_temperature_safety(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç –ª–∏ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –∏–ª–∏ –æ–±—Ä—ã–≤–∞ —Ç–µ—Ä–º–æ–ø–∞—Ä—ã"""
        temps = state.read_ai(self.press_id)  # ‚úÖ –ß—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —à–∏–Ω—É
        if not temps or temps[0] is None:
            time.sleep(1)
            temps = state.read_ai(self.press_id)  # ‚úÖ –ß—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —à–∏–Ω—É
            if not temps or temps[0] is None:
                logging.warning(f"SM –ü—Ä–µ—Å—Å-{self.press_id}: –Ω–µ —É–¥–∞—ë—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É.")
                return False

        temp = temps[0]

        if temp > self.max_temperature:
            logging.critical(f"SM –ü—Ä–µ—Å—Å-{self.press_id}: –ü–ï–†–ï–ì–†–ï–í! T={temp:.1f}¬∞C > {self.max_temperature}¬∞C")
            return False

        if temp <= self.thermocouple_error_value:
            logging.critical(f"SM –ü—Ä–µ—Å—Å-{self.press_id}: –û–ë–†–´–í –¢–ï–†–ú–û–ü–ê–†–´ (T={temp:.1f}¬∞C)")
            return False

        return True

    def is_safe(self) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ; False ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ä–∏—è.
        """
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ DI-—Å–∏–≥–Ω–∞–ª–æ–≤
        if self._read_input("e_stop"):
            logging.critical(f"SM –ü—Ä–µ—Å—Å-{self.press_id}: –ê–í–ê–†–ò–ô–ù–ê–Ø –ö–ù–û–ü–ö–ê –ù–ê–ñ–ê–¢–ê!")
            # üî• –ê–≤–∞—Ä–∏–π–Ω–æ –≤—ã–∫–ª—é—á–∞–µ–º –Ω–∞–≥—Ä–µ–≤
            if hasattr(self, 'temp_control'):
                self.temp_control.cool_all()
            return False

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if not self.check_temperature_safety():
            return False

        # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å —Å –º–æ–¥—É–ª—è–º–∏

        return True  # –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ
